#!/usr/bin/env bash

THIS_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"
SCRIPTS_DIR="${THIS_SCRIPT_DIR}"
source "${SCRIPTS_DIR}/common" # Add the functions in 'common'

# EXPECTED PARAMS:
# 1 : The process to check the existance of.
# Return code : 0 if the process already started, otherwise nonzero.
isProcessRunning() {
    checkParamNum 1 $# || exit 1
    local PROCESS_NAME="${1}"
    pidof "${PROCESS_NAME}" >/dev/null
}

checkProcessesNotAlreadyStarted() {
    local startedProcesses=()
    for processName in "${PROCESS_NAMES[@]}"; do
        if isProcessRunning "${processName}"; then
            startedProcesses+=("${processName}")
        fi
    done

    if [ ${#startedProcesses[@]} == 0 ]; then
        true
    else
        local errMsg=$'\nCannot start the Elevation server: Some processes already started:\n'
        for startedProcessName in "${startedProcesses[@]}"; do
            errMsg+="* '${startedProcessName}' (PID $(pidof ${startedProcessName}))"$'\n'
        done
        errMsg+=$'\n'
        messageError "${errMsg}"
        false
    fi
}

# Starts one of the processes under the 'build/' directory.
# The process will be called with:
#     <NAME> <PORT_OPTION> <PORT> <EXTRA_PARAMS>
#
# EXPECTED PARAMS:
#  1 : Process name
#  2 : Process executable
#  3 : Environment variable to set the port number into. Empty string if don't care.
#  4 : Base port in production mode
#  5 : Number of ports to try in production mode
#  6 : Base port in dev mode
#  7 : Number of ports to try in dev mode
#  8 : Delay after starting the process before checking whether it is still alive
#  9 : The option to specify the port.
# 10 : Extra parameters to pass to process. Must not contain Bash variables ; expand them before calling.
startServerProcess() {
    checkParamNum 10 $# || exit 1
    local NAME="${1}"
    local PROCESS_EXECUTABLE="${2}"
    local OUTPUT_VARIABLE="${3}"
    local BASE_PORT_PROD_MODE="${4}"
    local NUM_TRIES_PROD_MODE="${5}"
    local BASE_PORT_DEV_MODE="${6}"
    local NUM_TRIES_DEV_MODE="${7}"
    local RETRY_DELAY="${8}"
    local PORT_OPTION="${9}"
    local EXTRA_PARAMS="${10}"

    if "${IS_PROD_MODE}"; then
        local MIN_PORT="${BASE_PORT_PROD_MODE}"
        local MAX_PORT=$(("${MIN_PORT}" + "${NUM_TRIES_PROD_MODE}" - 1))
    else
        local MIN_PORT="${BASE_PORT_DEV_MODE}"
        local MAX_PORT=$(("${MIN_PORT}" + "${NUM_TRIES_DEV_MODE}" - 1))
    fi

    message $'\nStarting '"${NAME}"$'...\n'
    local port="${MIN_PORT}"
    while [ "${port}" != "${MAX_PORT}" ]; do
        echo $'\n'"Trying port number ${port}"

        START_COMMAND="\"${PROCESS_EXECUTABLE}\" \"${PORT_OPTION}\" \"${port}\" ${EXTRA_PARAMS} &"
        if "${IS_PROD_MODE}" && [ "${port}" -le 1024 ]; then
            sudo echo -n # The start command is launched in background,
                         # which means we would start sleeping while the user is typing their password.
                         # Use a dummy non-background command to make sure the user doesn't have to
                         # type their password during the retry interval.

            eval "sudo ${START_COMMAND}" # Not quoted intentionally
        else
            eval ${START_COMMAND} # Not quoted intentionally
        fi
        sleep "${RETRY_DELAY}"

        if isProcessRunning "${NAME}"; then
            break
        else
            port=$((${port} + 1))
        fi
    done

    if [ "${port}" -le "${MAX_PORT}" ]; then
        eval "${OUTPUT_VARIABLE}"="${port}"
    else
        messageError $'\nCould not start '"${NAME}"$'\n'
    fi
}

startHttpServer() {
    checkParamNum 0 $# || exit 1
    local NAME="${HTTP_SERVER_NAME}"
    local PROCESS_EXECUTABLE="./build/${HTTP_SERVER_NAME}/${HTTP_SERVER_NAME}"
    local OUTPUT_VARIABLE="HTTP_SERVER_PORT"
    local BASE_PORT_PROD_MODE="80"
    local NUM_TRIES_PROD_MODE="20"
    local BASE_PORT_DEV_MODE="8080"
    local NUM_TRIES_DEV_MODE="20"
    local RETRY_DELAY="0.5"
    local PORT_OPTION="--port"
    local EXTRA_PARAMS="--cache-path \"${SERVER_CACHE_PATH}\""

    startServerProcess "${NAME}" "${PROCESS_EXECUTABLE}" "${OUTPUT_VARIABLE}" "${BASE_PORT_PROD_MODE}" "${NUM_TRIES_PROD_MODE}" "${BASE_PORT_DEV_MODE}" "${NUM_TRIES_DEV_MODE}" "${RETRY_DELAY}" "${PORT_OPTION}" "${EXTRA_PARAMS}"
}

startHttpsServer() {
    checkParamNum 0 $# || exit 1
    local NAME="${HTTPS_SERVER_NAME}"
    local PROCESS_EXECUTABLE="./build/${HTTPS_SERVER_NAME}/${HTTPS_SERVER_NAME}"
    local OUTPUT_VARIABLE="HTTPS_SERVER_PORT"
    local BASE_PORT_PROD_MODE="443"
    local NUM_TRIES_PROD_MODE="20"
    local BASE_PORT_DEV_MODE="4433"
    local NUM_TRIES_DEV_MODE="20"
    local RETRY_DELAY="0.5"
    local PORT_OPTION="--port"
    local EXTRA_PARAMS="--cache-path \"${SERVER_CACHE_PATH}\""

    startServerProcess "${NAME}" "${PROCESS_EXECUTABLE}" "${OUTPUT_VARIABLE}" "${BASE_PORT_PROD_MODE}" "${NUM_TRIES_PROD_MODE}" "${BASE_PORT_DEV_MODE}" "${NUM_TRIES_DEV_MODE}" "${RETRY_DELAY}" "${PORT_OPTION}" "${EXTRA_PARAMS}"
}

startSslDaemon() {
    checkParamNum 0 $# || exit 1
    local NAME="${SSL_DAEMON_NAME}"
    local PROCESS_EXECUTABLE="./build/${SSL_DAEMON_NAME}/${SSL_DAEMON_NAME}"
    local OUTPUT_VARIABLE="SSL_DAEMON_PORT"
    local BASE_PORT_PROD_MODE="7777"
    local NUM_TRIES_PROD_MODE="20"
    local BASE_PORT_DEV_MODE="7777"
    local NUM_TRIES_DEV_MODE="20"
    local RETRY_DELAY="0.5"
    local PORT_OPTION="-l"
    local EXTRA_PARAMS="-o \"${HTTPS_SERVER_PORT}\""

    startServerProcess "${NAME}" "${PROCESS_EXECUTABLE}" "${OUTPUT_VARIABLE}" "${BASE_PORT_PROD_MODE}" "${NUM_TRIES_PROD_MODE}" "${BASE_PORT_DEV_MODE}" "${NUM_TRIES_DEV_MODE}" "${RETRY_DELAY}" "${PORT_OPTION}" "${EXTRA_PARAMS}"
}

startElevationPlayer() {
    checkParamNum 0 $# || exit 1
    local NAME="${ELEVATION_PLAYER_NAME}"
    local PROCESS_EXECUTABLE="./build/${ELEVATION_PLAYER_NAME}/${ELEVATION_PLAYER_NAME}"
    local OUTPUT_VARIABLE="ELEVATION_PLAYER_PORT"
    local BASE_PORT_PROD_MODE="6666"
    local NUM_TRIES_PROD_MODE="20"
    local BASE_PORT_DEV_MODE="6666"
    local NUM_TRIES_DEV_MODE="20"
    local RETRY_DELAY="0.5"
    local PORT_OPTION="--port"
    local EXTRA_PARAMS="--cache-path \"${SERVER_CACHE_PATH}\""

    startServerProcess "${NAME}" "${PROCESS_EXECUTABLE}" "${OUTPUT_VARIABLE}" "${BASE_PORT_PROD_MODE}" "${NUM_TRIES_PROD_MODE}" "${BASE_PORT_DEV_MODE}" "${NUM_TRIES_DEV_MODE}" "${RETRY_DELAY}" "${PORT_OPTION}" "${EXTRA_PARAMS}"
}

# EXPECTED PARAMS :
# 1 : Expression which, if true, makes us wait until any of the processes is finished.
# 2 : Expression which, if true, makes us launch the servers with root access, and the
#     player with normal user access.
lanunchEverything() {
    checkParamNum 2 $# || exit 1
    local SHOULD_WAIT="${1}"
    local IS_PROD_MODE="${2}"

    local SERVER_CACHE_PATH="${SERVER_DIR}/cache"
    mkdir -p "${SERVER_CACHE_PATH}"
    if checkProcessesNotAlreadyStarted; then
        cd "${SERVER_DIR}"
        startElevationPlayer
        startHttpServer
        startHttpsServer
        startSslDaemon
        local MESSAGE_STRING=$'\nHTTP Server started on port '"${HTTP_SERVER_PORT}"$',\nHTTPS Server started on port '"${HTTPS_SERVER_PORT}"$',\nSSL Daemon started on port '"${SSL_DAEMON_PORT}"$',\nand '"${ELEVATION_PLAYER_NAME}"$' started on port '"${ELEVATION_PLAYER_PORT}"$'.\nCache path: '"${SERVER_CACHE_PATH}"$'\n\n'
        if ${SHOULD_WAIT}; then
            message "${MESSAGE_STRING}"
            trap stopBySignal INT TERM # Call 'stopBySignal' when we recieve the
                                       # SIGINT (CTRL+C) / SIGTERM signal.
            wait -n
            stop
        else
            disown
            message "${MESSAGE_STRING}"
        fi
    fi
}

startDev() {
    checkParamNum 0 $# || exit 1
    lanunchEverything false false
}

startProd() {
    checkParamNum 0 $# || exit 1
    if [ "$(whoami)" != root ]; then
        lanunchEverything false true
    else
        messageError $'\nCannot start the Elevation server in production environment while root:\nPulseAudio is anti-environmental and not like roots.\n'
        exit 1
    fi
}

run() {
    checkParamNum 0 $# || exit 1
    lanunchEverything true false
}

stop() {
    checkParamNum 0 $# || exit 1
    if pidof "${HTTP_SERVER_NAME}" >/dev/null; then
        kill -TERM $(pidof "${HTTP_SERVER_NAME}")
        sleep 0.5
        kill -KILL $(pidof "${HTTP_SERVER_NAME}") 2>/dev/null
    fi
    if pidof "${HTTPS_SERVER_NAME}" >/dev/null; then
        kill -TERM $(pidof "${HTTPS_SERVER_NAME}")
        sleep 0.5
        kill -KILL $(pidof "${HTTPS_SERVER_NAME}") 2>/dev/null
    fi
    if pidof "${SSL_DAEMON_NAME}" >/dev/null; then
        kill -TERM $(pidof "${SSL_DAEMON_NAME}")
        sleep 0.5
        kill -KILL $(pidof "${SSL_DAEMON_NAME}") 2>/dev/null
    fi
    if pidof "${ELEVATION_PLAYER_NAME}" >/dev/null; then
        kill -TERM $(pidof "${ELEVATION_PLAYER_NAME}")
        sleep 0.5
        kill -KILL $(pidof "${ELEVATION_PLAYER_NAME}") 2>/dev/null
    fi
}

stopBySignal() {
    message $'\nDoing last-minute cleanup of the elevation server...'
    stop && message $'Done.'
}
