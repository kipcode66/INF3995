#!/usr/bin/env bash

THIS_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"
SCRIPTS_DIR="${THIS_SCRIPT_DIR}"
source "${SCRIPTS_DIR}/common" # Add the functions in 'common'

processesNotAlreadyStarted() {
    if pidof "${HTTP_SERVER_NAME}" >/dev/null; then
        message "Cannot start HTTP Server : already started (PID $(pidof "${HTTP_SERVER_NAME}"))"$'\n'
        false
    elif pidof "${HTTPS_SERVER_NAME}" >/dev/null; then
        message "Cannot start HTTPS Server : already started (PID $(pidof "${HTTPS_SERVER_NAME}"))"$'\n'
        false
    elif pidof "${SSL_DAEMON_NAME}" >/dev/null; then
        echo "Cannot start SSL Daemon : already started (PID $(pidof "${SSL_DAEMON_NAME}"))"$'\n'
        false
    elif pidof "${ELEVATION_PLAYER_NAME}" >/dev/null; then
        echo "Cannot start SSL Daemon : already started (PID $(pidof "${ELEVATION_PLAYER_NAME}"))"$'\n'
        false
    else
        true
    fi
}

assignHttpServerPortRange() {
    checkParamNum 0 $# || exit 1
    if "${IS_PROD_MODE}"; then
        HTTP_SERVER_MIN_PORT=80
    else
        HTTP_SERVER_MIN_PORT=8080
    fi
    HTTP_SERVER_MAX_PORT=$((${HTTP_SERVER_MIN_PORT} + 20))
}

assignHttpsServerPortRange() {
    checkParamNum 0 $# || exit 1
    HTTPS_SERVER_MIN_PORT=7777
    HTTPS_SERVER_MAX_PORT=$((${HTTPS_SERVER_MIN_PORT} + 20))
}

assignSslDaemonPortRange() {
    checkParamNum 0 $# || exit 1
    if "${IS_PROD_MODE}"; then
        SSL_DAEMON_MIN_PORT=443
    else
        SSL_DAEMON_MIN_PORT=4433
    fi
    SSL_DAEMON_MAX_PORT=$((${SSL_DAEMON_MIN_PORT} + 20))
}

assignElevationPlayerPortRange() {
    checkParamNum 0 $# || exit 1
    ELEVATION_PLAYER_MIN_PORT=6666
    ELEVATION_PLAYER_MAX_PORT=$((${ELEVATION_PLAYER_MIN_PORT} + 20))
}

startHttpServer() {
    message $'\nStarting HTTP Server...\n'
    HTTP_SERVER_PORT="${HTTP_SERVER_MIN_PORT}"
    while [ "${HTTP_SERVER_PORT}" != "${HTTP_SERVER_MAX_PORT}" ]; do
        echo $'\n'"Trying port number ${HTTP_SERVER_PORT}"

        START_COMMAND="\"./build/${HTTP_SERVER_NAME}/${HTTP_SERVER_NAME}\" --cache-path \"${SERVER_CACHE_PATH}\" --port \"${HTTP_SERVER_PORT}\" &"
        if "${IS_PROD_MODE}"; then
            eval "sudo ${START_COMMAND}" # Not quoted intentionally
        else
            eval ${START_COMMAND} # Not quoted intentionally
        fi
        sleep 0.5

        if pidof "${HTTP_SERVER_NAME}" >/dev/null; then
            break
        else
            HTTP_SERVER_PORT=$((${HTTP_SERVER_PORT} + 1))
        fi
    done
}

startHttpsServer() {
    message $'\nStarting HTTPS Server...\n'
    HTTPS_SERVER_PORT="${HTTPS_SERVER_MIN_PORT}"
    while [ "${HTTPS_SERVER_PORT}" != "${HTTPS_SERVER_MAX_PORT}" ]; do
        echo $'\n'"Trying port number ${HTTPS_SERVER_PORT}"
        "./build/${HTTPS_SERVER_NAME}/${HTTPS_SERVER_NAME}" --cache-path "${SERVER_CACHE_PATH}" --port "${HTTPS_SERVER_PORT}" &
        sleep 0.5
        if pidof "${HTTPS_SERVER_NAME}" >/dev/null; then
            break
        else
            HTTPS_SERVER_PORT=$((${HTTPS_SERVER_PORT} + 1))
        fi
    done
}

startSslDaemon() {
    message $'\nStarting SSL Daemon...\n'
    SSL_DAEMON_PORT="${SSL_DAEMON_MIN_PORT}"
    while [ "${SSL_DAEMON_PORT}" != "${SSL_DAEMON_MAX_PORT}" ]; do
        echo $'\n'"Trying port number ${SSL_DAEMON_PORT}"
        START_COMMAND="\"./build/${SSL_DAEMON_NAME}/${SSL_DAEMON_NAME}\" -l \"${SSL_DAEMON_PORT}\" -o \"${HTTPS_SERVER_PORT}\" &"
        if "${IS_PROD_MODE}"; then
            eval "sudo ${START_COMMAND}"
        else
            eval ${START_COMMAND}
        fi
        sleep 0.5
        if pidof "${SSL_DAEMON_NAME}" >/dev/null; then
            break
        else
            SSL_DAEMON_PORT=$((${SSL_DAEMON_PORT} + 1))
        fi
    done
}

startElevationPlayer() {
    message $'\nStarting Elevation Player...\n'
    ELEVATION_PLAYER_PORT="${ELEVATION_PLAYER_MIN_PORT}"
    while [ "${ELEVATION_PLAYER_PORT}" != "${ELEVATION_PLAYER_MAX_PORT}" ]; do
        "./build/${ELEVATION_PLAYER_NAME}/${ELEVATION_PLAYER_NAME}" --cache-path "${SERVER_CACHE_PATH}" --port "${ELEVATION_PLAYER_PORT}" &
        sleep 0.5
        if pidof "${ELEVATION_PLAYER_NAME}" >/dev/null; then
            break
        else
            ELEVATION_PLAYER_PORT=$((${ELEVATION_PLAYER_PORT} + 1))
        fi
    done
}

# EXPECTED PARAMS :
# 1 : Expression which, if true, makes us wait until any of the processes is finished.
# 2 : Expression which, if true, makes us launch the servers with root access, and the
#     player with normal user access.
lanunchEverything() {
    checkParamNum 2 $# || exit 1
    local SHOULD_WAIT="${1}"
    local IS_PROD_MODE="${2}"

    local SERVER_CACHE_PATH="${SERVER_DIR}/cache"
    mkdir -p "${SERVER_CACHE_PATH}"
    if processesNotAlreadyStarted; then
        cd "${SERVER_DIR}"
        assignHttpServerPortRange
        startHttpServer
        assignHttpsServerPortRange
        startHttpsServer
        assignSslDaemonPortRange
        startSslDaemon
        assignElevationPlayerPortRange
        startElevationPlayer
        local MESSAGE_STRING=$'\nHTTP Server started on port '"${HTTP_SERVER_PORT}"$',\nHTTPS Server started on port '"${HTTPS_SERVER_PORT}"$',\nSSL Daemon started on port '"${SSL_DAEMON_PORT}"$',\nand '"${ELEVATION_PLAYER_NAME}"$' started on port '"${ELEVATION_PLAYER_PORT}"$'.\nCache path: '"${SERVER_CACHE_PATH}"$'\n\n'
        if ${SHOULD_WAIT}; then
            message "${MESSAGE_STRING}"
            trap stopBySignal INT TERM # Call 'stopBySignal' when we recieve the
                                       # SIGINT (CTRL+C) / SIGTERM signal.
            wait -n
            stop
        else
            disown
            message "${MESSAGE_STRING}"
        fi
    fi
}

startDev() {
    checkParamNum 0 $# || exit 1
    lanunchEverything false false
}

startProd() {
    checkParamNum 0 $# || exit 1
    if [ "$(whoami)" != root ]; then
        lanunchEverything false true
    else
        messageError $'\nCannot start the Elevation server in production environment while root:\nPulseAudio is anti-environmental and not like roots.\n'
        exit 1
    fi
}

run() {
    checkParamNum 0 $# || exit 1
    lanunchEverything true false
}

stop() {
    checkParamNum 0 $# || exit 1
    if pidof "${HTTP_SERVER_NAME}" >/dev/null; then
        kill -TERM $(pidof "${HTTP_SERVER_NAME}")
        sleep 0.5
        kill -KILL $(pidof "${HTTP_SERVER_NAME}") 2>/dev/null
    fi
    if pidof "${HTTPS_SERVER_NAME}" >/dev/null; then
        kill -TERM $(pidof "${HTTPS_SERVER_NAME}")
        sleep 0.5
        kill -KILL $(pidof "${HTTPS_SERVER_NAME}") 2>/dev/null
    fi
    if pidof "${SSL_DAEMON_NAME}" >/dev/null; then
        kill -TERM $(pidof "${SSL_DAEMON_NAME}")
        sleep 0.5
        kill -KILL $(pidof "${SSL_DAEMON_NAME}") 2>/dev/null
    fi
    if pidof "${ELEVATION_PLAYER_NAME}" >/dev/null; then
        kill -TERM $(pidof "${ELEVATION_PLAYER_NAME}")
        sleep 0.5
        kill -KILL $(pidof "${ELEVATION_PLAYER_NAME}") 2>/dev/null
    fi
}

stopBySignal() {
    message $'\nDoing last-minute cleanup of the elevation server...'
    stop && message $'Done.'
}
