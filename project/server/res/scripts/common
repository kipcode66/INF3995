#!/usr/bin/env bash

###############################################################################
#                         COMMON CONSTANT DEFINITIONS                         #
###############################################################################

THIS_SCRIPT_DIR="$( cd "$( dirname "${BASH_SOURCE[0]}" )" >/dev/null && pwd )"
SCRIPTS_DIR="${THIS_SCRIPT_DIR}"
GIT_DIR="${SCRIPTS_DIR}/../../../.."
SERVER_DIR="${SCRIPTS_DIR}/../.."
TEST_RESOURCES_DIR="${SERVER_DIR}/src/test-resources"

COMMON_LIB_NAME=common
HTTP_SERVER_NAME=http-server
HTTPS_SERVER_NAME=https-server
SSL_DAEMON_NAME=ssl-daemon
ELEVATION_PLAYER_NAME=elevation-player

###############################################################################
#                         COMMON FUNCTION DEFINITIONS                         #
###############################################################################

# EXPECTED PARAMS:
# any amount
message() {
    echo -n -e '\e[1;92m'
    echo "$@"
    echo -n -e  '\e[0m'
}

# EXPECTED PARAMS:
# any amount
messageError() {
    echo -n -e '\e[1;91m'
    echo "$@" >&2
    echo -n -e '\e[0m'
    false
}

# EXPECTED PARAMS:
# 1 : The expected number of arguments
# 2 : The actual number of arguments
#
# RETURN CODE:
# false if expected != actual ; otherwise 0
checkParamNum() {
    if [ "${2}" != "${1}" ]; then
        messageError "${FUNCNAME[1]} : Got ${2} params ; expected ${1}"
        false
    fi
    true
}

# EXPECTED PARAMS:
# None
getCoreCount() {
    checkParamNum 0 $# || exit 1
    cat /proc/cpuinfo | awk '/^processor/ {print($3)}' | wc -l
}

# EXPECTED PARAMS:
# 1 : The path that should be made relative
# 2 : The path that <1> should be relative to.
makeRelative() {
    realpath "${1}" --relative-to="${2}"
}

